{"version":3,"sources":["../src/breadcrumb_ctrl.js"],"names":["_","PanelCtrl","impressions","BreadcrumbCtrl","$scope","$injector","$location","backendSrv","navigate","bind","dashboardList","windowLocation","sessionStorage","getItem","setItem","search","breadcrumb","items","split","createDashboardList","JSON","parse","updateText","window","onpopstate","event","length","dashIds","getDashboardOpened","orgId","dashboardIds","limit","panel","then","result","filter","filterItem","findIndex","uri","map","item","url","name","find","title","params","parseParamsString","stringify","parsedBreadcrumb","index","pop","queryParams","location","currentDashboard","pathname","obj","push","parseBreadcrumbForUrl","replace","paramsObj","charAt","substr","paramsArray","paramItem","paramItemArr","paramsString","Object","keys","paramKey","splice","parseParamsObject","urlRoot","href","indexOf","templateUrl"],"mappings":"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","file":"breadcrumb_ctrl.js","sourcesContent":["/**\n * <h3>Breadcrumb panel for Grafana</h3>\n *\n * This breadcumb panel utilizes session storage to store dashboards where user has visited.\n * When panel is loaded it first checks if breadcrumb is given in url params and utilizes that.\n * If no breadcrumb is given in url params then panel tries to read breadcrumb from session storage.\n * Finally the panel adds the just loaded dashboard as the latest item in dashboard and updates session storage.\n * Breadcrumb stores the dashboard's name, url and possible query params to the session storage.\n * If user navigates with browser back button then breadcrumb is recreated from previous url params.\n * Also if user navigates back by clicking one of the breadcrumb items then the items following the selected\n * item are removed from breadcrumb, user is moved to selected dashboard and session storage is updated.\n */\nimport _ from \"lodash\";\nimport { PanelCtrl } from \"app/plugins/sdk\";\nimport { impressions } from \"app/features/dashboard/impression_store\";\nimport \"./breadcrumb.css!\";\nclass BreadcrumbCtrl extends PanelCtrl {\n    /**\n     * Breadcrumb class constructor\n     * @param {IBreadcrumbScope} $scope Angular scope\n     * @param {ng.auto.IInjectorService} $injector Angluar injector service\n     * @param {ng.ILocationService} $location Angular location service\n     * @param {any} backendSrv Grafana backend callback\n     */\n    constructor($scope, $injector, $location, backendSrv) {\n        super($scope, $injector);\n        // Init variables\n        $scope.navigate = this.navigate.bind(this);\n        this.backendSrv = backendSrv;\n        this.dashboardList = [];\n        this.windowLocation = $location;\n        // Check for browser session storage and create one if it doesn't exist\n        if (!sessionStorage.getItem(\"dashlist\")) {\n            sessionStorage.setItem(\"dashlist\", \"[]\");\n        }\n        // Check if URL params has breadcrumb\n        if ($location.search().breadcrumb) {\n            const items = $location.search().breadcrumb.split(\",\");\n            this.createDashboardList(items);\n        }\n        else {\n            // If no URL params are given then get dashboard list from session storage\n            this.dashboardList = JSON.parse(sessionStorage.getItem(\"dashlist\"));\n        }\n        this.updateText();\n        // Listen for PopState events so we know when user navigates back with browser\n        // On back navigation we'll take the changed breadcrumb param from url query and\n        // recreate dashboard list\n        window.onpopstate = (event) => {\n            if (this.dashboardList.length > 0) {\n                if ($location.search().breadcrumb) {\n                    const items = $location.search().breadcrumb.split(\",\");\n                    this.createDashboardList(items);\n                }\n            }\n        };\n    }\n    /**\n     * Create dashboard items\n     * @param {string[]} items Array of dashboard ids\n     */\n    createDashboardList(items) {\n        var dashIds = impressions.getDashboardOpened();\n        var orgId = this.windowLocation.search()[\"orgId\"];\n        // Fetch list of all dashboards from Grafana\n        this.backendSrv.search({ dashboardIds: dashIds, limit: this.panel.limit }).then((result) => {\n            this.dashboardList = items.filter((filterItem) => {\n                return (_.findIndex(result, { uri: \"db/\" + filterItem }) > -1);\n            })\n                .map((item) => {\n                return {\n                    url: \"dashboard/db/\" + item,\n                    name: _.find(result, { uri: \"db/\" + item }).title,\n                    params: this.parseParamsString({ orgId })\n                };\n            });\n            // Update session storage\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\n        });\n    }\n    /**\n     * Parse breadcrumb string for URL\n     * @returns {string}\n     */\n    parseBreadcrumbForUrl() {\n        let parsedBreadcrumb = \"\";\n        this.dashboardList.map((item, index) => {\n            parsedBreadcrumb += item.url.split(\"/\").pop();\n            if (index < this.dashboardList.length - 1) {\n                parsedBreadcrumb += \",\";\n            }\n        });\n        return parsedBreadcrumb;\n    }\n    /**\n     * Update Breadcrumb items\n     */\n    updateText() {\n        var dashIds = impressions.getDashboardOpened();\n        var queryParams = window.location.search;\n        // Fetch list of all dashboards from Grafana\n        this.backendSrv.search({ dashboardIds: dashIds, limit: this.panel.limit }).then((result) => {\n            // Set current dashboard\n            this.currentDashboard = window.location.pathname.split(\"/\").pop();\n            var uri = \"db/\" + this.currentDashboard;\n            var obj = _.find(result, { uri: uri });\n            // Add current dashboard to breadcrumb if it doesn't exist\n            if (_.findIndex(this.dashboardList, { url: \"dashboard/\" + uri }) < 0 && obj) {\n                this.dashboardList.push({ url: \"dashboard/\" + uri, name: obj.title, params: queryParams });\n            }\n            // Update session storage\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\n            // Parse modified breadcrumb and set it to url query params\n            const parsedBreadcrumb = this.parseBreadcrumbForUrl();\n            this.windowLocation.search({ breadcrumb: parsedBreadcrumb }).replace();\n        });\n    }\n    /**\n     * Parse params string to object\n     * @param {string} params\n     * @returns {Object}\n     */\n    parseParamsObject(params) {\n        const paramsObj = {};\n        if (params.charAt(0) === \"?\") {\n            params = params.substr(1, params.length);\n        }\n        const paramsArray = params.split(\"&\");\n        paramsArray.map((paramItem) => {\n            const paramItemArr = paramItem.split(\"=\");\n            paramsObj[paramItemArr[0]] = paramItemArr[1];\n        });\n        return paramsObj;\n    }\n    /**\n     * Parse params object to string\n     * @param {Object} params\n     * @returns {string}\n     */\n    parseParamsString(params) {\n        let paramsString = \"?\";\n        Object.keys(params).map((paramKey, index) => {\n            paramsString += paramKey + \"=\" + params[paramKey];\n            if (index < Object.keys(params).length - 1) {\n                paramsString += \"&\";\n            }\n        });\n        return paramsString;\n    }\n    /**\n     * Navigate to given dashboard\n     * @param {string} url\n     */\n    navigate(url, params) {\n        // Check if user is navigating backwards in breadcrumb and\n        // remove all items that follow the selected item in that case\n        const index = _.findIndex(this.dashboardList, { url: url });\n        if (index > -1 && this.dashboardList.length >= index + 2) {\n            this.dashboardList.splice(index + 1, this.dashboardList.length - index - 1);\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\n        }\n        // Parse params string to object\n        const queryParams = this.parseParamsObject(params);\n        // Delete possible breadcrumb param so that breadcrumb from session will be used instead\n        delete queryParams[\"breadcrumb\"];\n        // Check url root assuming that Grafana dashboard url has string \"dashboard/db/\"\n        let urlRoot = window.location.href.substr(0, window.location.href.indexOf(\"dashboard/db/\"));\n        // Set new url and notify parent window\n        window.location.href = urlRoot + url + this.parseParamsString(queryParams);\n    }\n}\nBreadcrumbCtrl.templateUrl = \"module.html\";\nexport { BreadcrumbCtrl, BreadcrumbCtrl as PanelCtrl };\n//# sourceMappingURL=breadcrumb_ctrl.js.map"]}