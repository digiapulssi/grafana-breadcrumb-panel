{"version":3,"sources":["../src/breadcrumb_ctrl.js"],"names":["_","PanelCtrl","impressions","BreadcrumbCtrl","$scope","$injector","$location","backendSrv","navigate","bind","dashboardList","windowLocation","sessionStorage","getItem","setItem","search","breadcrumb","items","split","createDashboardList","JSON","parse","updateText","$on","target","window","parent","location","href","dashIds","getDashboardOpened","dashboardIds","limit","panel","then","result","map","item","url","name","find","uri","title","stringify","currentDashboard","pathname","pop","obj","findIndex","push","notifyContainerWindow","messageObj","dashboard","top","postMessage","index","length","splice","path","templateUrl"],"mappings":"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","file":"breadcrumb_ctrl.js","sourcesContent":["/// <reference path=\"../typings/common.d.ts\" />\r\n/// <reference path=\"../typings/index.d.ts\" />\r\nimport _ from \"lodash\";\r\nimport { PanelCtrl } from \"app/plugins/sdk\";\r\nimport { impressions } from \"app/features/dashboard/impression_store\";\r\nimport \"./breadcrumb.css!\";\r\nclass BreadcrumbCtrl extends PanelCtrl {\r\n    /**\r\n     * Breadcrumb class constructor\r\n     * @param {IBreadcrumbScope} $scope Angular scope\r\n     * @param {ng.auto.IInjectorService} $injector Angluar injector service\r\n     * @param {ng.ILocationService} $location Angular location service\r\n     * @param {any} backendSrv Grafana backend callback\r\n     */\r\n    constructor($scope, $injector, $location, backendSrv) {\r\n        super($scope, $injector);\r\n        // Init variables\r\n        $scope.navigate = this.navigate.bind(this);\r\n        this.backendSrv = backendSrv;\r\n        this.dashboardList = [];\r\n        this.windowLocation = $location;\r\n        // Check for browser session storage and create one if it doesn't exist\r\n        if (!sessionStorage.getItem(\"dashlist\")) {\r\n            sessionStorage.setItem(\"dashlist\", \"[]\");\r\n        }\r\n        // Check if URL params has breadcrumb\r\n        if ($location.search().breadcrumb) {\r\n            const items = $location.search().breadcrumb.split(\",\");\r\n            this.createDashboardList(items);\r\n        }\r\n        else {\r\n            // If no URL params are given then get dashboard list from session storage\r\n            this.dashboardList = JSON.parse(sessionStorage.getItem(\"dashlist\"));\r\n        }\r\n        this.updateText();\r\n        // Adding a mechanism for telling parent frame to navigate to new url\r\n        // Add listener for route changes: If route has target-parameter then\r\n        // tell parent window to navigate to given target\r\n        // e.g. setting following url-link in some Grafana dashboard: ?target=/logs\r\n        $scope.$on(\"$routeUpdate\", () => {\r\n            if ($location.search().target) {\r\n                window.parent.location.href = $location.search().target;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Create dashboard items\r\n     * @param {string[]} items Array of dashboard ids\r\n     */\r\n    createDashboardList(items) {\r\n        var dashIds = impressions.getDashboardOpened();\r\n        // Fetch list of all dashboards from Grafana\r\n        this.backendSrv.search({ dashboardIds: dashIds, limit: this.panel.limit }).then((result) => {\r\n            this.dashboardList = items.map((item) => {\r\n                return {\r\n                    url: \"dashboard/db/\" + item,\r\n                    name: _.find(result, { uri: \"db/\" + item }).title\r\n                };\r\n            });\r\n            // Update session storage\r\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\r\n        });\r\n    }\r\n    /**\r\n     * Update Breadcrumb items\r\n     */\r\n    updateText() {\r\n        var dashIds = impressions.getDashboardOpened();\r\n        // Fetch list of all dashboards from Grafana\r\n        this.backendSrv.search({ dashboardIds: dashIds, limit: this.panel.limit }).then((result) => {\r\n            this.currentDashboard = window.location.pathname.split(\"/\").pop();\r\n            var uri = \"db/\" + this.currentDashboard;\r\n            var obj = _.find(result, { uri: uri });\r\n            // Add current dashboard to breadcrumb if it doesn't exist\r\n            if (_.findIndex(this.dashboardList, { url: \"dashboard/\" + uri }) < 0) {\r\n                this.dashboardList.push({ url: \"dashboard/\" + uri, name: obj.title });\r\n            }\r\n            // Update session storage\r\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\r\n            this.notifyContainerWindow();\r\n        });\r\n    }\r\n    /**\r\n     * Notify container window\r\n     */\r\n    notifyContainerWindow() {\r\n        // Send message to uppper window\r\n        const messageObj = {\r\n            dashboard: window.location.pathname.split(\"/\").pop(),\r\n            breadcrumb: this.dashboardList\r\n        };\r\n        window.top.postMessage(messageObj, \"*\");\r\n    }\r\n    /**\r\n     * Navigate to given dashboard\r\n     * @param {string} url\r\n     */\r\n    navigate(url) {\r\n        // Check if user is navigating backwards in breadcrumb and\r\n        // remove all items that follow the selected item in that case\r\n        const index = _.findIndex(this.dashboardList, { url: url });\r\n        if (index > -1 && this.dashboardList.length >= index + 2) {\r\n            this.dashboardList.splice(index + 1, this.dashboardList.length - index - 1);\r\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\r\n        }\r\n        this.windowLocation.path(url);\r\n        this.notifyContainerWindow();\r\n    }\r\n}\r\nBreadcrumbCtrl.templateUrl = \"module.html\";\r\nexport { BreadcrumbCtrl, BreadcrumbCtrl as PanelCtrl };\r\n//# sourceMappingURL=breadcrumb_ctrl.js.map"]}