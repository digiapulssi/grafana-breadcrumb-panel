{"version":3,"sources":["../src/breadcrumb_ctrl.js"],"names":["_","PanelCtrl","impressions","BreadcrumbCtrl","$scope","$injector","$location","backendSrv","navigate","bind","dashboardList","windowLocation","sessionStorage","getItem","setItem","search","breadcrumb","items","split","createDashboardList","JSON","parse","updateText","$on","target","messageObj","params","window","top","postMessage","dashIds","getDashboardOpened","dashboardIds","limit","panel","then","result","map","item","url","name","find","uri","title","stringify","currentDashboard","location","pathname","pop","obj","findIndex","push","notifyContainerWindow","dashboard","index","length","splice","path","templateUrl"],"mappings":"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","file":"breadcrumb_ctrl.js","sourcesContent":["/// <reference path=\"../typings/common.d.ts\" />\n/// <reference path=\"../typings/index.d.ts\" />\nimport _ from \"lodash\";\nimport { PanelCtrl } from \"app/plugins/sdk\";\nimport { impressions } from \"app/features/dashboard/impression_store\";\nimport \"./breadcrumb.css!\";\nclass BreadcrumbCtrl extends PanelCtrl {\n    /**\n     * Breadcrumb class constructor\n     * @param {IBreadcrumbScope} $scope Angular scope\n     * @param {ng.auto.IInjectorService} $injector Angluar injector service\n     * @param {ng.ILocationService} $location Angular location service\n     * @param {any} backendSrv Grafana backend callback\n     */\n    constructor($scope, $injector, $location, backendSrv) {\n        super($scope, $injector);\n        // Init variables\n        $scope.navigate = this.navigate.bind(this);\n        this.backendSrv = backendSrv;\n        this.dashboardList = [];\n        this.windowLocation = $location;\n        // Check for browser session storage and create one if it doesn't exist\n        if (!sessionStorage.getItem(\"dashlist\")) {\n            sessionStorage.setItem(\"dashlist\", \"[]\");\n        }\n        // Check if URL params has breadcrumb\n        if ($location.search().breadcrumb) {\n            const items = $location.search().breadcrumb.split(\",\");\n            this.createDashboardList(items);\n        }\n        else {\n            // If no URL params are given then get dashboard list from session storage\n            this.dashboardList = JSON.parse(sessionStorage.getItem(\"dashlist\"));\n        }\n        this.updateText();\n        // Adding a mechanism for telling parent frame to navigate to new url\n        // Add listener for route changes: If route has target-parameter then\n        // tell parent window to navigate to given target\n        // e.g. setting following url-link in some Grafana dashboard: ?target=/logs\n        $scope.$on(\"$routeUpdate\", () => {\n            if ($location.search().target) {\n                const messageObj = {\n                    target: $location.search().target,\n                    params: $location.search().params\n                };\n                window.top.postMessage(messageObj, \"*\");\n            }\n        });\n    }\n    /**\n     * Create dashboard items\n     * @param {string[]} items Array of dashboard ids\n     */\n    createDashboardList(items) {\n        var dashIds = impressions.getDashboardOpened();\n        // Fetch list of all dashboards from Grafana\n        this.backendSrv.search({ dashboardIds: dashIds, limit: this.panel.limit }).then((result) => {\n            this.dashboardList = items.map((item) => {\n                return {\n                    url: \"dashboard/db/\" + item,\n                    name: _.find(result, { uri: \"db/\" + item }).title\n                };\n            });\n            // Update session storage\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\n        });\n    }\n    /**\n     * Update Breadcrumb items\n     */\n    updateText() {\n        var dashIds = impressions.getDashboardOpened();\n        // Fetch list of all dashboards from Grafana\n        this.backendSrv.search({ dashboardIds: dashIds, limit: this.panel.limit }).then((result) => {\n            this.currentDashboard = window.location.pathname.split(\"/\").pop();\n            var uri = \"db/\" + this.currentDashboard;\n            var obj = _.find(result, { uri: uri });\n            // Add current dashboard to breadcrumb if it doesn't exist\n            if (_.findIndex(this.dashboardList, { url: \"dashboard/\" + uri }) < 0) {\n                this.dashboardList.push({ url: \"dashboard/\" + uri, name: obj.title });\n            }\n            // Update session storage\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\n            this.notifyContainerWindow();\n        });\n    }\n    /**\n     * Notify container window\n     */\n    notifyContainerWindow() {\n        // Send message to uppper window\n        const messageObj = {\n            dashboard: window.location.pathname.split(\"/\").pop(),\n            breadcrumb: this.dashboardList\n        };\n        window.top.postMessage(messageObj, \"*\");\n    }\n    /**\n     * Navigate to given dashboard\n     * @param {string} url\n     */\n    navigate(url) {\n        // Check if user is navigating backwards in breadcrumb and\n        // remove all items that follow the selected item in that case\n        const index = _.findIndex(this.dashboardList, { url: url });\n        if (index > -1 && this.dashboardList.length >= index + 2) {\n            this.dashboardList.splice(index + 1, this.dashboardList.length - index - 1);\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\n        }\n        this.windowLocation.path(url);\n        this.notifyContainerWindow();\n    }\n}\nBreadcrumbCtrl.templateUrl = \"module.html\";\nexport { BreadcrumbCtrl, BreadcrumbCtrl as PanelCtrl };\n//# sourceMappingURL=breadcrumb_ctrl.js.map"]}